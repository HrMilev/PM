@inject IToDoRepository toDoRepository
@inject IAlertService alertService
@inject IStringLocalizer<Localization> loc
@inject IEventHandlerService eventHandlerService
<div class="card border border-dark mt-2">
    @if (isEditMode)
    {
        <Close OnClick="() => isEditMode = false"></Close>
        <div class="card-body">
            <div class="card-subtitle">
                <ToDoForm ToDo="Model" OnValidSubmit="UpdateAsync" SubmitButtonText="@loc["Edit"]"></ToDoForm>
            </div>
        </div>
    }
    else
    {
        <div class="card-body">
            <div class="card-subtitle row">
                <div class="col col-5">@Model.StartDate</div>
                <div class="col col-5">@Model.EndDate</div>
                <button type="button" @onclick="OnEdit" class="col btn btn-warning btn-block p-2 m-1" style="display: @(IsEditOn ? "inline" : "none")">
                    <i class="fas fa-edit"></i>
                </button>
                <button type="button" @onclick="OnDelete" class="col btn btn-danger btn-block p-2 m-1" style="display: @(IsDeleteOn ? "inline" : "none")">
                    <i class="fas fa-trash-alt"></i>
                </button>
            </div>
            <p class="card-text">@Model.Description</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public ToDoRestModel Model { get; set; }
    [Parameter]
    public bool IsDeleteOn { get; set; }
    [Parameter]
    public bool IsEditOn { get; set; }

    private bool isEditMode = false;

    public async Task OnDelete()
    {
        var result = await toDoRepository.DeleteAsync(Model.Id);
        if (result.IsSuccess)
        {
            alertService.PushMessage(AlertMessageEnum.Success, loc["Deleted"]);
            eventHandlerService.RaiseAsync(EventHandlerEnum.ToDoDeleted);
        }
        else
        {
            alertService.PushMessage(AlertMessageEnum.Danger, loc["Something went wrong"]);
        }
    }

    public void OnEdit()
    {
        isEditMode = true;
    }


    private async Task UpdateAsync()
    {
        var todo = await toDoRepository.UpdateAsync(Model);
        alertService.PushMessage(AlertMessageEnum.Success, loc["Edited"]);
        eventHandlerService.RaiseAsync(EventHandlerEnum.ToDoEdited);
        isEditMode = false;
    }
}
