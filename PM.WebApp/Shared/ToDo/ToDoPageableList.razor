@implements IDisposable
@inject IStringLocalizer<Localization> loc
@inject IToDoRepository toDoRepository
@inject IEventHandlerService eventHandlerService

<ListComponent T="ToDoRestModel" Elements="@todoPage">
    <ChildContent Context="toDo">
        <ToDoCard Model="toDo" IsDeleteOn="true" IsEditOn="true"></ToDoCard>
    </ChildContent>
</ListComponent>
<ul class="pagination justify-content-center" style="display: @(todoPage.Count() == 0 && pages == 0 ? "none" : "")">
    <li class="page-item @(currentPage > 1 ? "" : "disabled")" @onclick="GetPreviousPage">
        <div class="page-link" aria-label="Previous">
            <span aria-hidden="true">&laquo;</span>
            <span class="sr-only">Previous</span>
        </div>
    </li>
    <li class="page-item active"><div class="page-link">@currentPage</div></li>
    <li class="page-item @(currentPage < pages ? "" : "disabled")" @onclick="GetNextPage">
        <div class="page-link" aria-label="Next">
            <span aria-hidden="true">&raquo;</span>
            <span class="sr-only">Next</span>
        </div>
    </li>
</ul>
@code {
    private static int pageSize = 3;
    private IEnumerable<ToDoRestModel> todoPage = new List<ToDoRestModel>();
    private int pages = 0;
    private int currentPage = 1;

    private async Task GetPreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            (todoPage, pages) = await toDoRepository.GetPageAsync(currentPage, pageSize);
        }
    }

    private async Task GetNextPage()
    {
        if (currentPage < pages)
        {
            currentPage++;
            (todoPage, pages) = await toDoRepository.GetPageAsync(currentPage, pageSize);
        }
    }

    private async Task Update(SimpleEventArgs args)
    {
        if ((args != null && args.IsOfType(EventHandlerEnum.ToDoDeleted, EventHandlerEnum.ToDoCreated))
            || pages == currentPage
            || pages == 0)
        {
            if (currentPage == pages
                && todoPage.Count() == 1
                && args.IsOfType(EventHandlerEnum.ToDoDeleted)
                && currentPage != 1)
            {
                currentPage--;
            }

            (todoPage, pages) = await toDoRepository.GetPageAsync(currentPage, pageSize);
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        eventHandlerService.OnNotify -= Update;
        eventHandlerService.OnNotify += Update;
        (todoPage, pages) = await toDoRepository.GetPageAsync(currentPage, pageSize);
    }

    public void Dispose()
    {
        eventHandlerService.OnNotify -= Update;
    }
}
