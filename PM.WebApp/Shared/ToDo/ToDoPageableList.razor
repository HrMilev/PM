@implements IDisposable
@inject IStringLocalizer<Localization> loc
@inject IToDoRepository toDoRepository
@inject IEventHandlerService eventHandlerService

<ListComponent T="ToDoRestModel" Elements="@todoPage">
    <ChildContent Context="toDo">
        <ToDoCard Model="toDo" IsDeleteOn="true" IsEditOn="true"></ToDoCard>
    </ChildContent>
</ListComponent>

@code {
    private static int pageSize = 10;
    private IEnumerable<ToDoRestModel> todoPage = new List<ToDoRestModel>();
    private int pages = 0;
    private int currentPage = 1;

    private async Task Update(SimpleEventArgs args)
    {
        if ((args != null && args.IsOfType(EventHandlerEnum.ToDoDeleted, EventHandlerEnum.ToDoCreated))
            || pages == currentPage
            || pages == 0)
        {
            (todoPage, pages) = await toDoRepository.GetPageAsync(currentPage, pageSize);
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        eventHandlerService.OnNotify -= Update;
        eventHandlerService.OnNotify += Update;
        (todoPage, pages) = await toDoRepository.GetPageAsync(currentPage, pageSize);
    }

    public void Dispose()
    {
        eventHandlerService.OnNotify -= Update;
    }
}
