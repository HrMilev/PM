@inject IStringLocalizer<Localization> loc

<tr style="@(isDeleting ? "display: none" : "")">
    <th scope="row">
        @if (isEdit)
        {
            <EditForm class="form-inline" Model="Folder" OnValidSubmit="OnValidEditing">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <InputText class="form-control border-dark"
                               @bind-Value="@Folder.Name">
                    </InputText>
                    <ValidationMessage For="@(() => Folder.Name)" />
                </div>
                <button class="btn btn-warning" type="submit">@loc["Save"]</button>
            </EditForm>
        }
        else
        {
            <i class="fas fa-folder"></i>
            @Folder.Name
        }
    </th>
    <td @onclick="@(async () => await OnOpen.InvokeAsync(Folder))">
        @if (!isEdit)
        {
            <button type="button" class="btn btn-primary">
                <i class="fas fa-folder-open"></i>
            </button>
        }
    </td>
    <td>
        @if (!isEdit)
        {
            <button type="button" class="btn btn-warning" @onclick=@OnEditing>
                <i class="fas fa-edit"></i>
            </button>
        }
    </td>
    <td>
        @if (!isEdit)
        {
            <button type="button" class="btn btn-danger" @onclick=@OnDeleting>
                <i class="fas fa-trash"></i>
            </button>
        }
        else
        {
            <Close OnClick="OnClose"></Close>
        }
    </td>
</tr>


@code {
    private bool isDeleting;
    private bool isEdit;
    private string folderName;
    [Parameter]
    public FolderRestModel Folder { get; set; }
    [Parameter]
    public EventCallback<FolderRestModel> OnOpen { get; set; }
    [Parameter]
    public EventCallback<FolderRestModel> OnEdit { get; set; }
    [Parameter]
    public EventCallback<FolderRestModel> OnDelete { get; set; }

    private async Task OnDeleting()
    {
        isDeleting = true;
        await OnDelete.InvokeAsync(Folder);
        isDeleting = false;
    }

    private void OnEditing()
    {
        isEdit = true;
        folderName = Folder.Name;
    }

    private void OnClose()
    {
        isEdit = false;
        Folder.Name = folderName;
    }

    private async Task OnValidEditing()
    {
        if (!isEdit)
        {
            return;
        }
        isEdit = false;
        await OnEdit.InvokeAsync(Folder);
    }
}
