@inject IFolderRepository folderRepository
@inject IUploadedFileRepository fileRepository
@inject IStringLocalizer<Localization> loc

<div class="card border border-dark mt-2">
    <FolderPath Path="@GetPath()"
                IsBackDisabled=@(rootFolder == currentFolder)
                OnBack="OnBack">
        <Content>
            <UploadFiles OnChange="OnInputFiles"></UploadFiles>
        </Content>
    </FolderPath>
    <FolderContent CurrentFolder="currentFolder"
                   OnOpen="OnOpen"
                   OnEdit="OnEdit"
                   OnAdd="OnAdd"
                   OnDelete="OnDelete"></FolderContent>
</div>

@code {
    private FolderRestModel rootFolder = new FolderRestModel();
    private FolderRestModel currentFolder = new FolderRestModel { ChildFolders = new List<FolderRestModel>(), Files = new List<UploadedFileRestModel>() };
    private List<FolderRestModel> foldersPath = new List<FolderRestModel>();

    private async Task OnInputFiles(InputFileChangeEventArgs e)
    {
        IReadOnlyList<IBrowserFile> selectedFiles = e.GetMultipleFiles();
        var filesToSave = new List<UploadedFileRestModel>();
        foreach (var file in selectedFiles)
        {
            using Stream stream = file.OpenReadStream();
            using MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);

            var uploadFile = new UploadedFileRestModel
            {
                Name = file.Name,
                Content = ms.ToArray()
            };

            filesToSave.Add(uploadFile);
        }

        if (currentFolder.Files == null)
        {
            currentFolder.Files = new List<UploadedFileRestModel>();
        }

        currentFolder.Files = currentFolder.Files.Concat(await fileRepository.SaveListAsync(filesToSave, currentFolder.Id)).ToList();
    }

    private string GetPath()
    {
        return foldersPath.Select(x => x.Name).Aggregate("", (x, y) => x + "/" + y);
    }

    private async Task OnDelete(FolderRestModel folder)
    {
        await folderRepository.DeleteAsync(folder.Id);
        currentFolder.ChildFolders.RemoveAt(currentFolder.ChildFolders.IndexOf(folder));
    }

    private async Task OnAdd(FolderRestModel folder)
    {
        folder.ParentFolderId = currentFolder.Id != 0 ? currentFolder.Id : null;
        var savedFolder = await folderRepository.CreateFolderAsync(folder);
        currentFolder.ChildFolders.Add(savedFolder);
    }

    private async Task OnEdit(FolderRestModel folder)
    {
        var editedFolder = await folderRepository.UpdateAsync(folder);
        var oldFolder = currentFolder.ChildFolders.FirstOrDefault(x => x.Id == editedFolder.Id);
        currentFolder.ChildFolders[currentFolder.ChildFolders.IndexOf(oldFolder)] = editedFolder;
    }

    protected void OnBack()
    {
        if (foldersPath.Count() > 1)
        {
            foldersPath.RemoveAt(foldersPath.Count() - 1);
            currentFolder = foldersPath.Last();
        }
    }

    protected void OnOpen(FolderRestModel folder)
    {
        currentFolder = folder;
        foldersPath.Add(folder);
    }

    protected async override Task OnInitializedAsync()
    {
        currentFolder = rootFolder = await folderRepository.GetTreeAsync();
        foldersPath.Add(currentFolder);
    }
}
