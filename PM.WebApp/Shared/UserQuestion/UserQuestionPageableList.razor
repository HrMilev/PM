@implements IDisposable
@inject IStringLocalizer<Localization> loc
@inject IUserQuestionRepository userQuestionRepository
@inject IEventHandlerService eventHandlerService

<ListComponent T="UserQuestionRestModel" Elements="@userQuestionPage">
    <ChildContent Context="userQuestion">
        <UserQuestionCard Model="userQuestion"></UserQuestionCard>
    </ChildContent>
</ListComponent>
<PaginationFooter CurrentPageEntitiesCount="userQuestionPage.Count()"
                  Pages="pages"
                  CurrentPage="currentPage"
                  GetPreviousPage="GetPreviousPage"
                  GetNextPage="GetNextPage"></PaginationFooter>
@code {
    private static int pageSize = 3;
    private IEnumerable<UserQuestionRestModel> userQuestionPage = new List<UserQuestionRestModel>();
    private int pages = 0;
    private int currentPage = 1;

    private async Task GetPreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            (userQuestionPage, pages) = await userQuestionRepository.GetPageAsync(currentPage, pageSize);
        }
    }

    private async Task GetNextPage()
    {
        if (currentPage < pages)
        {
            currentPage++;
            (userQuestionPage, pages) = await userQuestionRepository.GetPageAsync(currentPage, pageSize);
        }
    }

    private async Task Update(SimpleEventArgs args)
    {
        if ((args != null && args.IsOfType(EventHandlerEnum.UserQuestionDeleted, EventHandlerEnum.UserQuestionReplied))
            || pages == currentPage
            || pages == 0)
        {
            if (currentPage == pages
                && userQuestionPage.Count() == 1
                && args.IsOfType(EventHandlerEnum.UserQuestionDeleted, EventHandlerEnum.UserQuestionReplied)
                && currentPage != 1)
            {
                currentPage--;
            }

            (userQuestionPage, pages) = await userQuestionRepository.GetPageAsync(currentPage, pageSize);
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        eventHandlerService.OnNotify -= Update;
        eventHandlerService.OnNotify += Update;
        (userQuestionPage, pages) = await userQuestionRepository.GetPageAsync(currentPage, pageSize);
    }

    public void Dispose()
    {
        eventHandlerService.OnNotify -= Update;
    }
}
